#lang pl 02


#|
********************************************************************************************
  ██████╗  ██╗   ██╗ ███████╗ ███████╗ ████████╗ ██╗  ██████╗  ███╗   ██╗      ██╗
 ██╔═══██╗ ██║   ██║ ██╔════╝ ██╔════╝ ╚══██╔══╝ ██║ ██╔═══██╗ ████╗  ██║     ███║
 ██║   ██║ ██║   ██║ █████╗   ███████╗    ██║    ██║ ██║   ██║ ██╔██╗ ██║     ╚██║
 ██║▄▄ ██║ ██║   ██║ ██╔══╝   ╚════██║    ██║    ██║ ██║   ██║ ██║╚██╗██║      ██║
 ╚██████╔╝ ╚██████╔╝ ███████╗ ███████║    ██║    ██║ ╚██████╔╝ ██║ ╚████║      ██║
  ╚══▀▀═╝   ╚═════╝  ╚══════╝ ╚══════╝    ╚═╝    ╚═╝  ╚═════╝  ╚═╝  ╚═══╝      ╚═╝

********************************************************************************************
The SE grammer:


<SE> ::= (1)  "<D>"
         (20) <D>
         (2) | #\v
         (3) | λ
         (4) | (string-length <SE>)
         (5) | (string <char>)
         (6) | (string-append (<SE>)(<SE>))
         (7) | <str>
         (8) | (number->string <SE>)
          

<str> ::= (9)  "<D>"
          (21) <D>
          (10) | #\v
          (11) | λ
          (12) | (string-length <str>)
          (13) | (string <char>)
          (14) | (string-append (<str>)(<str>))
          (15) | (string-insert <str> <str> <str>)
          (16) | (number->string <SE>)
           


<char> ::= (17) #\v <char>
           (18) | #\v
           (19) | λ

          
ex1: (string-append ( string #\1 #\2 #\4 ) "12" ) useing string-append:

<SE>
=> (6) string-append (<SE>)(<SE>))
=> (5) string-append  ((string <char>))(<SE>))
=> (1)  string-append  ((string <char>))(<SE>))
=> (17) string-append  ((string #\1 <char>))(<SE>))
=> (17) string-append  ((string #\1 #\2 <char>))(<SE>))             
=> (17) string-append  ((string #\1 #\2 <char>))(<SE>))  
=> (18) string-append  ((string #\1 #\2 #\4))(<SE>))
=> (1) string-append  ((string #\1 #\2 #\4))("12"))
 
ex2: ( number->string ( string-length "0033344" ) ) using string-length:

<SE>
=>  (8) (number->string <SE>)
=>  (4) (number->string (string-length <SE>))
=>  (1) (number->string (string-length "0033344"))


ex3: ( number->string 156879 ) 

<SE>
=> (8) (number->string <SE>)
=> (20) (number->string 156879)


|#


#|******************************************************************************************
  ██████╗  ██╗   ██╗ ███████╗ ███████╗ ████████╗ ██╗  ██████╗  ███╗   ██╗     ██████╗
 ██╔═══██╗ ██║   ██║ ██╔════╝ ██╔════╝ ╚══██╔══╝ ██║ ██╔═══██╗ ████╗  ██║     ╚════██╗
 ██║   ██║ ██║   ██║ █████╗   ███████╗    ██║    ██║ ██║   ██║ ██╔██╗ ██║      █████╔╝
 ██║▄▄ ██║ ██║   ██║ ██╔══╝   ╚════██║    ██║    ██║ ██║   ██║ ██║╚██╗██║     ██╔═══╝
 ╚██████╔╝ ╚██████╔╝ ███████╗ ███████║    ██║    ██║ ╚██████╔╝ ██║ ╚████║     ███████╗
  ╚══▀▀═╝   ╚═════╝  ╚══════╝ ╚══════╝    ╚═╝    ╚═╝  ╚═════╝  ╚═╝  ╚═══╝     ╚══════╝
********************************************************************************************
|#

(: square : Number -> Number)
(define (square x) (* x x))


(: sum-of-squares :(Listof Number) -> Number)
(define (sum-of-squares lst)
  (foldl + 0 (map square lst)))


 
(test (sum-of-squares '(1 2 3)) => 14) 
 
